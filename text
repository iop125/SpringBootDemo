demo01=搭建项目
demo02=多环境配置  可以通过在执行jar的时候 添加--spring.profiles.active=dev来选择环境
demo04=加载自定义内容， 跳转6
demo05=jsp  跳转7
demo06=
demo07=webflux
         Mono 表示包含0或一个异步序列
         Mono.fromSupplier(()->doSome());
         Mono.just("monoHandle");
         Flux表示包含多个异步序列
demo08= 异步asynservlet
demo09= sse  server-sent event
        单项通道，只能由客户端发服务器发消息一个请求多个响应，
        与websocket的区别
        多通过，客户端和服务器可以互相发送，多个请求多个相应，
        使用若客户端发送消息频发选择websocket

        浏览器中在js中使用eventsource触发
        onopen()链接是触发
        onmessage() 收到服务端发送的时间时触发
        addEventSource()
demo10= reactive strem是webflux的基础
        一、实现方式
            1。RxJava 是一种反应式编程库，产生于反应式流规范之前，使用比较麻烦。
            2。RxJava2 是对 RxJava 的改进，产生于反应式流规范之后，其兼顾了反应式流规范，同时
            又兼容了 RxJava，所以其使用起来仍不是很方便。
            3。 Reactor 是完全基于反应式流规范的、全新的反应式编程库，使用更为直观易懂。是
            Spring5 中反应式编程的基础。
        二、介绍
            1。推拉模型与背压
            在流处理机制中，push(推送)模型和 pull(拉取)模型是最常见的。push 模型中，发 布者将元素主动推送给订阅者。而 pull 模式中，订阅者会向发布者主动索要。在同步式系统 中发布者与订阅者的工作效率相当，发布者发布一个消息后阻塞，等待订阅者消费。订阅者 消费完后，订阅者阻塞，等待发布者发布。这种同步式处理方式效率很低。一般使用的是异 步消息处理机制。即发布者发布消息，与消费者消费消息的速度是不一样的。那么它们间是 如何协调工作的呢?
            当订阅者比发布者快时，会出现订阅者无消息可消费的情况。在同步数据处理机制中订 阅者需无限期等待，直到有消息可用。但在异步处理机制中，订阅者无需阻塞，其继续处理 其他任务即可。当出现了准备就绪的消息时，发布者会将它们异步发送给订阅者。所以，在 异步处理机制中，这种情况并不会对系统性能产生负面影响。
            当发布者比订阅者快时，有两大类解决方案。
            一类解决方案是改变订阅者。要么使订阅者拥有一个无边界缓冲区来保存快速传入的消 息，要么让订阅者将它无法处理的消息丢弃。
            另一类解决方案是改变发布者。这类解决方案采用的策略称为背压(Back Pressure)策 略。订阅者告诉发布者让其减慢发布速度并保持消息，直到订阅者准备好处理更多消息。使 用背压策略可确保较快的发布者不会压制较慢的订阅者。但该解决方案要求发布者要拥有无 限制缓冲区，以确保发布者可以一直生产和保存消息。当然，发布者也可以实现有界缓冲区 以保存有限数量的消息。但若缓冲区满，则需要放弃这些消息。不过，可以让发布者将放弃 的消息再发布，直到订阅将其消费。
            2。 反应式流
            反应式流从 2013 年开始，作为提供非阻塞背压的异步流处理标准的倡议，旨在解决处 理元素流(即消息流、数据流)的问题——如何将元素流从发布者传递到订阅者，而不需要 发布者阻塞，或订阅者有无限制的缓冲区或丢弃。
            反应式流模型非常简单:订阅者向发布者发送多个元素的异步请求，发布者向订阅者异 步发送多个或稍少的元素。反应式流会在 pull 模型和 push 模型流处理机制之间动态切换。 当发布者快、订阅者慢时，它使用 pull 模型;当发布者慢、订阅者快时，它使用 push 模型。 即谁慢谁占主动。
        三、反应式流接口
            在 JDK 中 Flow 类中声明了四个反应式流接口。
            (1) Publisher<T>接口 Publisher，即发布者，是有序消息的生产者。它根据收到的请求向订阅者发布消息。
            (2) Subscriber<T>接口
            Subscriber，即订阅者，从发布者那里订阅并接收消息。发布者向订阅者发送订阅令牌 (Subscription)。使用订阅令牌，订阅者可以从发布者那里请求多个消息。
            当消息元素准备 就绪时，发布者向订阅者发送多个或更少的元素。然后订阅者可以再次请求更多的消息元素， 或取消订阅。一个发布者可能需要处理来自多个订阅者的请求。
            (3) Subscription 接口
            Subscription(订阅费)，订阅令牌。当订阅请求成功时，发布者将其传递给订阅者。订阅 者使用订阅令牌与发布者进行交互，例如请求更多的消息元素或取消订阅。
            (4) 三个接口的关系
            (5) Processor<T, R>接口
            Processor，即处理器，充当订阅者和发布者的处理阶段。Processor 接口继承了 Publisher 和 Subscriber 接口。它用于转换发布者/订阅者管道中的元素。
            Processor<T, R>会将来自于发 布者的 T 类型的消息数据，接收并转换为 R 类型的数据，并将转换后的 R 类型数据发布给订 阅者。一个发布者可以拥有多个处理者。

demo11= webflux开发  看pdf  传统的开发方式
        表单提交
        1。接入HiddenHttpMethodFilter过滤器
        2。from中添加<input type="hidden" value="DELETE" name="_method"/>

        校验逻辑
        自定义：
demo12= webflux开发  看pdf  传统的开发方式
        表单提交
        1。接入HiddenHttpMethodFilter过滤器
        2。from中添加<input type="hidden" value="DELETE" name="_method"/>
1.SomeController 第一个程序 初始化的一个程序
    SpringbootApplication这个是启动的主方法
2。配置的两种方式
    第一种  application.properties
    server.port=8080  //端口号
    server.servlet.context-path=/miao //路径
    第二种 application.yml
    server:
        port: 8080
        servlet:
            context-path: /miao
3。Actuator  --spring boot的健康检查、审计、统计和监控
    里面有很多 可以百度了解
    配置
    #Actuator
    management.server.port=9999
    management.server.servlet.context-path=/actuator
    management.endpoints.web.base-path=/actuator

    访问：http://localhost:9999/actuator/actuator/health
4。自定义错误页面
    在resources目录下建立public 文件夹在其下面建立error文件夹  对应错误编码生成html文件 如404.html
5。多环境选择 --选择配置文件和接口调用不同
 5。1.创建配置文件 例：application-pro.properties   -后面是你的环境标识
 5。2.在文件application.properties 通过配置  spring.profiles.include= 来加载文件  值为文件名中的表示
 5。3.加载接口的时候在接口实现类或者方法上面添加@Profile("pro")标签 值为环境表示
 5。4.其他的正常开发
6。读取配置文件中的值

  6.1  类中通过加载配置文件
      @PropertySource("classpath:custom.properties")
  6.2 自定义String属性
      配置文件中
      #String
      compoy.name=皮卡丘
      类中属性
       @Value("${compoy.name}")
        private String name;
  6.3对象属性
    StudentDTO
    类中中通过  @PropertySource("classpath:custom.properties")加载配置文件
           @ConfigurationProperties("student")标志对象映射
    配置文件中
    student.name=shui
    student.age=12
  6.4 list<String>属性
      StudentDTO
      和上面一样但是 多了一层
      配置文件中
      student.sorce[0]=0
      student.sorce[2]=2
      student.sorce[1]=1
  6.5 list<Object>属性
  StudentDTO User
   private List<User> studentDTOs;
   要新建user类
  #list<Object>属性
  student.studentDTOs[0].age=0
  student.studentDTOs[0].name=name0
  student.studentDTOs[1].age=1
  student.studentDTOs[1].name=name1
7。支持jsp
  7.1导入jar
  <!--支持jsp-->
          <dependency>
              <groupId>org.apache.tomcat.embed</groupId>
              <artifactId>tomcat-embed-jasper</artifactId>
          </dependency>
          <!--jsp页面使用jstl标签-->
          <dependency>
              <groupId>javax.servlet</groupId>
              <artifactId>jstl</artifactId>
          </dependency>
  7.2 设置webapp资源位置 --pom.xml
          <resources>
              <resource>
                  <directory>src/main/webapp</directory>
                  <targetPath>META_INF/resources</targetPath>
                  <includes>
                      <include>**/*.*</include>
                  </includes>
              </resource>
          </resources>
  7.3 支持jsp寻址
      spring.mvc.view.prefix=/WEB-INF/jsp/
      spring.mvc.view.suffix=.jsp
8。集成mybiats
8。1 导入mybatis jar
        <!--mybaits-->
        <dependency>
            <groupId>org.mybatis.spring.boot</groupId>
            <artifactId>mybatis-spring-boot-starter</artifactId>
            <version>1.3.2</version>
        </dependency>
        <dependency>
            <groupId>org.mybatis.spring.boot</groupId>
            <artifactId>mybatis-spring-boot-autoconfigure</artifactId>
            <version>1.3.2</version>
        </dependency>
        <!--mysql-->
        <dependency>
            <groupId>mysql</groupId>
            <artifactId>mysql-connector-java</artifactId>
            <version>5.1.6</version>
        </dependency>
        <!-- alibaba的druid数据库连接池 -->
        <dependency>
            <groupId>com.alibaba</groupId>
            <artifactId>druid-spring-boot-starter</artifactId>
            <version>1.1.1</version>
            <exclusions>
                <exclusion>
                    <groupId>org.springframework.boot</groupId>
                    <artifactId>spring-boot-starter-parent</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
   8。2 配置文件
       #mybaits配置地址
       #mybatis.config-location=classpath:mybatis/mybatis-config.xml
       mybatis.type-aliases-package=com.miao.springboot.domain.po
       mybatis.mapper-locations=classpath:mybatis/mapper/*.xml

       # 注册数据源类型
       spring.datasource.type=com.alibaba.druid.pool.DruidDataSource
       spring.datasource.driver-class-name=com.mysql.jdbc.Driver
       spring.datasource.url =jdbc:mysql://192.168.166.30:3359/pop_workstation
       spring.datasource.username =pop_crm_rw
       spring.datasource.password =pop_crm_rw3ed
   8。3 注解 在EmployeeDao 类上添加@Mapper  在方法上添加@Insert("INSERT INTO userinfo(userName, passWord) VALUES (#{userName}, #{passWord})")来定位sql
9 开启事务
    启动类中写上
    @EnableTransactionManagement  //开启事物

    在方法上添加
        @Transactional  //添加事物注解
10 redis
    10。1 非注解的
    RedisConfig和RedisUtil 弄好redisTemplate 使用 redisTemplate对redis进行操作
    RedisController
    10。2注解的不灵活  以后在说
11。拦截器
    在非 Spring Boot工程中若要使用 SpringMVC的拦截器，在 定义好后需要的拦截器，在 定义好后需要的拦截器，在 定义好后需要的拦截器，
    在 定义好后需要的拦截器，在 定义好后需要的拦截器，在 定义好后需要Spring配置文件中对其进行注册。但 配置文件中对其进行注册。
    但 Spring Boot工程中没有了Spring配置文件，那么如何使用拦 配置文件，那么如何使用拦 配置文件，那么如何使用拦 截器呢？
    Spring Boot对于原来在配置文件的内容，现全部体一个类中该需要继承

    现全部体一个类中该需要继承 自 WebMvcConfigurationSupport 类，其 充当配置文件的角色。 充
11。1 创建自己的拦截器  SomeInterceptor
    package com.miao.springboot.controller.interceptor;

    import org.springframework.lang.Nullable;
    import org.springframework.web.servlet.HandlerInterceptor;
    import org.springframework.web.servlet.ModelAndView;
    import javax.servlet.http.HttpServletRequest;
    import javax.servlet.http.HttpServletResponse;

    public class SomeInterceptor implements HandlerInterceptor {
        @Override
        public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception {
            System.out.println("执行了拦截器  哈哈");
            return true;
        }
        @Override
        public void postHandle(HttpServletRequest request, HttpServletResponse response, Object handler, @Nullable ModelAndView modelAndView) throws Exception {
        }
        @Override
        public void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler, @Nullable Exception ex) throws Exception {
        }
    }
11。2 通过类定义 配置文件类
    MyWebMvcConfiguration

    package com.miao.springboot.configFile;
    import com.miao.springboot.controller.interceptor.SomeInterceptor;
    import org.springframework.context.annotation.Configuration;
    import org.springframework.web.servlet.config.annotation.InterceptorRegistry;
    import org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport;
    @Configuration
    public class MyWebMvcConfiguration extends WebMvcConfigurationSupport {
        @Override
        protected void addInterceptors(InterceptorRegistry registry) {
            SomeInterceptor sm = new SomeInterceptor();
            registry.addInterceptor(sm).addPathPatterns("/redisController/**").excludePathPatterns("/mybaitsController/**");
        }
    }

12 servlet
    若使用的servlet3。0+版本 可以直接使用Servlet的注解对setvlet进行注册 步骤2个
 1。在定义好的servlet 上使用@WebServlet
 2。在入口上添加 @ServletComponentScan注解
 若是servlet 2。5版本的只能使用配置类

    注解形式的
 12。1创建servlet类     SomeServlet

     package com.miao.springboot.controller.servlet;
     import javax.servlet.ServletException;
     import javax.servlet.annotation.WebServlet;
     import javax.servlet.http.HttpServlet;
     import javax.servlet.http.HttpServletRequest;
     import javax.servlet.http.HttpServletResponse;
     import java.io.IOException;
     import java.io.PrintWriter;
     @WebServlet("/someServlet")
     public class SomeServlet extends HttpServlet {
         protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
             PrintWriter pw = resp.getWriter();
             pw.println("hello serlvet");
         }
     }
 12.2 修改入口类 添加servlet扫描
     package com.miao.springboot;
     import org.springframework.boot.SpringApplication;
     import org.springframework.boot.autoconfigure.SpringBootApplication;
     import org.springframework.boot.web.servlet.ServletComponentScan;
     import org.springframework.cache.annotation.EnableCaching;
     import org.springframework.transaction.annotation.EnableTransactionManagement;

     @SpringBootApplication
     @EnableTransactionManagement    //开启事物
     @EnableCaching                  //开启缓存
     @ServletComponentScan("com.miao.springboot.controller.servlet")         //开启serlet扫描
     public class SpringbootApplication {

         public static void main(String[] args) {
             SpringApplication.run(SpringbootApplication.class, args);
         }

     }
配置形式的
 12。1创建servlet类     SomeServlet

package com.miao.springboot.controller.servlet;

import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.IOException;
import java.io.PrintWriter;

public class SomeXmlServlet extends HttpServlet {

    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
        PrintWriter pw = resp.getWriter();
        pw.println("hello serlvet");
    }
}
12。2 定义配置类  MyApplicationContext
package com.miao.springboot.configFile;

import com.miao.springboot.controller.servlet.SomeXmlServlet;
import org.springframework.boot.web.servlet.ServletRegistrationBean;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

@Configuration  //当前类为 config类  相当于spring容器
public class MyApplicationContext {
    @Bean
    public ServletRegistrationBean<SomeXmlServlet> getServletBean() {
        SomeXmlServlet ss = new SomeXmlServlet();
        //注册servlet
        return new ServletRegistrationBean<>(ss, "/someXmlServlet");
    }
}
13 filter
 若使用的servlet3。0+版本 可以直接使用filter的注解对filter进行注册 步骤2个
 1。在定义好的filter 上使用@WebFilter
 2。在入口上添加 @ServletComponentScan注解
 若是servlet 2。5版本的只能使用配置类
13.1 fiter类
package com.miao.springboot.controller.filter;
import javax.servlet.*;
import javax.servlet.annotation.WebFilter;
import java.io.IOException;
@WebFilter("/*")
public class MyFilter implements Filter {
    @Override
    public void init(FilterConfig filterConfig) throws ServletException {
        System.out.println("MyFilter - init");
    }
    @Override
    public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain) throws IOException, ServletException {
        System.out.println("MyFilter - doFilter g过滤了吧");
        filterChain.doFilter(servletRequest, servletResponse);
    }
    @Override
    public void destroy() {
        System.out.println("MyFilter - destroy ");
    }
}

13.2 修改入口 添加filter扫描
package com.miao.springboot;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.boot.web.servlet.ServletComponentScan;
import org.springframework.cache.annotation.EnableCaching;
import org.springframework.transaction.annotation.EnableTransactionManagement;

@SpringBootApplication
@EnableTransactionManagement    //开启事物
@EnableCaching                  //开启缓存
@ServletComponentScan("com.miao.springboot.controller.*")         //开启serlet&filter扫描
public class SpringbootApplication {

    public static void main(String[] args) {
        SpringApplication.run(SpringbootApplication.class, args);
    }
}
配置方式

13.1 fiter类
package com.miao.springboot.controller.filter;
import javax.servlet.*;
import javax.servlet.annotation.WebFilter;
import java.io.IOException;
@WebFilter("/*")
public class MyPFilter implements Filter {
    @Override
    public void init(FilterConfig filterConfig) throws ServletException {
        System.out.println("MyFilter - init");
    }
    @Override
    public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain) throws IOException, ServletException {
        System.out.println("MyFilter - doFilter g过滤了吧");
        filterChain.doFilter(servletRequest, servletResponse);
    }
    @Override
    public void destroy() {
        System.out.println("MyFilter - destroy ");
    }
}
13.2 配置文件
package com.miao.springboot.configFile;

import com.miao.springboot.controller.filter.MyPFilter;
import com.miao.springboot.controller.servlet.SomeXmlServlet;
import org.springframework.boot.web.servlet.FilterRegistrationBean;
import org.springframework.boot.web.servlet.ServletRegistrationBean;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

@Configuration  //当前类为 config类  相当于spring容器
public class MyApplicationContext {
    @Bean
    public ServletRegistrationBean<SomeXmlServlet> getServletBean() {
        SomeXmlServlet ss = new SomeXmlServlet();
        //注册servlet
        return new ServletRegistrationBean<>(ss, "/someXmlServlet");
    }
    @Bean
    public FilterRegistrationBean<MyPFilter> getFilterBean() {
        MyPFilter ss = new MyPFilter();
        //注册servlet
        FilterRegistrationBean filterRegistrationBean = new FilterRegistrationBean<>(ss);
        filterRegistrationBean.addUrlPatterns("/mybaitsController/*");
        return filterRegistrationBean;
    }
}

14 Thymeleaf
1。配置文件中
#thymeleaf 缓存
spring.thymeleaf.cache=false

2。在src/main/resources/templates目录下定义 目录下定义 index.html页
3。
    <!--thymeleaf-->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-thymeleaf</artifactId>
        </dependency>


